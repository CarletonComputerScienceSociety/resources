---
import Base from "../layouts/Base.astro";
import { Sidebar } from "../components/resources";
import "./Resource.style.scss";
import { getCollection } from "astro:content";
import { CircleIcon, Navbar } from "../components/core";

const { frontmatter } = Astro.props;
const metadata = {
  title: frontmatter.title,
  description: "coming soon",
  url: "",
  image: "/",
};

const resourcePages = await getCollection("resources");

const dateOptions: object = {
  year: "numeric",
  month: "long",
  day: "numeric",
};

const formattedPublishDate = new Date(frontmatter.date).toLocaleDateString(
  "en-US",
  dateOptions
);

// TODO: move to a config file

const iconMap = {
  "student-life": "fa fa-home",
  academics: "fa fa-graduation-cap",
  careers: "fa fa-briefcase",
  "self-learning": "fa fa-seedling",
  courses: "fa fa-book",
  faqs: "fa fa-lightbulb",
};

const colorSetMap = {
  "student-life": "red-card",
  academics: "green-card",
  careers: "blue-card",
  "self-learning": "orange-card",
  courses: "purple-card",
  faqs: "yellow-card",
};

const icon = iconMap[frontmatter.topic];
const colorSet = colorSetMap[frontmatter.topic];
---

<Base {metadata}>
  <div class="resources-layout">
    <div style="margin-top:1.5rem"></div>
    <Navbar />
    <div class="resources-layout__container">
      <!-- <Sidebar client:load /> -->
      <div class={`resources-layout__content a-${colorSet}`}>
        <div class="resources-layout__location">
          <div>
            <CircleIcon icon={icon} colorSet={colorSet} size="size-normal" />
          </div>
        </div>
        <h1 class="resources-layout__title">{frontmatter.title}</h1>
        <p class="resources-layout__updated">
          Last Updated: {formattedPublishDate}
        </p>
        <slot />
        <!-- TODO: sources component, see duplicate on FAQ Layout -->
        <div class="resources-layout__sources">
          {
            frontmatter?.sources?.length > 0 ? (
              <>
                <p>Sources:</p>
                <>
                  {frontmatter?.sources.map(
                    (
                      source: {
                        link: string | URL | null | undefined;
                        name: unknown;
                      },
                      index: number
                    ) => (
                      <div>
                        <span>
                          <a href={source.link}>({index + 1})</a>
                        </span>{" "}
                        <a href={source.link}>{source.name}</a>
                      </div>
                    )
                  )}
                </>
              </>
            ) : null
          }
        </div>
      </div>
    </div>
  </div>
</Base>
